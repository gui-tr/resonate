name: CI/CD Pipeline
on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

env:
  # CONFIG_ENV will be PROD when pushing to main, otherwise DEV.
  CONFIG_ENV: ${{ github.ref == 'refs/heads/main' && 'PROD' || 'DEV' }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # Add a service container for the database (using PostgreSQL as an example)
    services:
      db:
        image: postgres:13
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U testuser -d testdb" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
    environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # This ensures that you have a full clone rather than a shallow clone

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      # First inject secrets into main application.properties
      - name: Inject Secrets into Main Configuration
        run: |
          sed -i "s|\${SUPABASE_USERNAME}|${{ secrets.SUPABASE_USERNAME }}|g" src/main/resources/application.properties
          sed -i "s|\${SUPABASE_PASSWORD}|${{ secrets.SUPABASE_PASSWORD }}|g" src/main/resources/application.properties
          sed -i "s|\${JWT_SECRET}|${{ secrets.JWT_SECRET }}|g" src/main/resources/application.properties
          sed -i "s|\${SUPABASE_DB_URL}|${{ secrets.SUPABASE_DB_URL }}|g" src/main/resources/application.properties
          sed -i "s|\${SUPABASE_URL}|${{ secrets.SUPABASE_URL }}|g" src/main/resources/application.properties
          sed -i "s|\${SUPABASE_API_KEY}|${{ secrets.SUPABASE_API_KEY }}|g" src/main/resources/application.properties
          sed -i "s|\${BACKBLAZE_KEY_ID}|${{ secrets.BACKBLAZE_KEY_ID }}|g" src/main/resources/application.properties
          sed -i "s|\${BACKBLAZE_APPLICATION_KEY}|${{ secrets.BACKBLAZE_APPLICATION_KEY }}|g" src/main/resources/application.properties
          sed -i "s|\${BACKBLAZE_BUCKET_NAME}|${{ secrets.BACKBLAZE_BUCKET_NAME }}|g" src/main/resources/application.properties

      # Then handle environment-specific configurations
      - name: Prepare Environment Configuration
        run: |
          if [ "${CONFIG_ENV}" = "DEV" ]; then
            # For development, copy only the dev-specific properties and inject their secrets
            cat src/main/resources/configmaps/configmap-dev.properties >> src/main/resources/application.properties
            sed -i "s|\${SONAR_HOST_URL}|${{ secrets.SONAR_HOST_URL }}|g" src/main/resources/application.properties
            sed -i "s|\${SONAR_TOKEN}|${{ secrets.SONAR_TOKEN }}|g" src/main/resources/application.properties
            sed -i "s|\${SONAR_PROJECT_KEY}|${{ secrets.SONAR_PROJECT_KEY }}|g" src/main/resources/application.properties
            sed -i "s|\${SONAR_ORGANIZATION}|${{ secrets.SONAR_ORGANIZATION }}|g" src/main/resources/application.properties
          fi

      # Build the application (running tests when in DEV)
      - name: Build with Maven
        run: |
          if [ "${CONFIG_ENV}" = "DEV" ]; then
            mvn clean package -Dquarkus.profile=test
          else
            mvn clean package -Dquarkus.profile=prod -DskipTests
          fi

      # Run SonarCloud analysis only on the develop branch
      - name: Run SonarCloud Analysis
        if: github.ref == 'refs/heads/develop'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}

      # Install the Heroku CLI (required for Git-based deployment)
      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh

      # Set up the .netrc file for Heroku authentication
      - name: Set up .netrc for Heroku Authentication
        run: |
          echo "machine api.heroku.com" >> ~/.netrc
          echo "  login $HEROKU_EMAIL" >> ~/.netrc
          echo "  password $HEROKU_API_KEY" >> ~/.netrc
          echo "machine git.heroku.com" >> ~/.netrc
          echo "  login $HEROKU_EMAIL" >> ~/.netrc
          echo "  password $HEROKU_API_KEY" >> ~/.netrc
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}

      # Deploy to Heroku following the official Git deployment method
      - name: Deploy to Heroku
        run: |
          # Add (or update) the Heroku remote for your app.
          heroku git:remote -a ${{ secrets.HEROKU_APP_NAME }}
          # Deploy the current commit to the remote's main branch.
          git push --force-with-lease heroku HEAD:main
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
