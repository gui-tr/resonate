name: CI Pipeline
on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
env:
  CONFIG_ENV: DEV
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'
    
      - name: Prepare Configuration
        run: |
          if [ "${CONFIG_ENV}" = "DEV" ]; then
            cp src/main/resources/configmaps/configmap-dev.properties src/main/resources/application.properties
          else
            cp src/main/resources/configmaps/configmap-prod.properties src/main/resources/application.properties
          fi
      
      - name: Inject Secrets into Configuration
        run: |
          sed -i "s/\${SUPABASE_USERNAME}/${{ secrets.SUPABASE_USERNAME }}/g" src/main/resources/application.properties
          sed -i "s/\${SUPABASE_PASSWORD}/${{ secrets.SUPABASE_PASSWORD }}/g" src/main/resources/application.properties
          sed -i "s/\${JWT_SECRET}/${{ secrets.JWT_SECRET }}/g" src/main/resources/application.properties
      
      # Initialize database with Supabase-like schema structure
      - name: Initialize Supabase-like Database Structure
        run: |
          PGPASSWORD=testpassword psql -h localhost -p 5432 -U testuser -d testdb << EOF
          -- Create essential Supabase schemas
          CREATE SCHEMA IF NOT EXISTS auth;
          CREATE SCHEMA IF NOT EXISTS storage;
          CREATE SCHEMA IF NOT EXISTS extensions;
          
          -- Create basic auth.users table structure (simplified version)
          CREATE TABLE IF NOT EXISTS auth.users (
            id uuid PRIMARY KEY,
            email text UNIQUE,
            encrypted_password text,
            created_at timestamp with time zone DEFAULT now(),
            updated_at timestamp with time zone DEFAULT now()
          );
          
          -- Set proper permissions
          GRANT USAGE ON SCHEMA auth TO testuser;
          GRANT ALL ON ALL TABLES IN SCHEMA auth TO testuser;
          GRANT USAGE ON SCHEMA storage TO testuser;
          GRANT ALL ON ALL TABLES IN SCHEMA storage TO testuser;
          GRANT USAGE ON SCHEMA extensions TO testuser;
          
          -- Add additional extensions if needed
          -- CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA extensions;
          
          COMMIT;
          EOF
          
          echo "Supabase-like database structure initialization complete."
      
      - name: Build and Test with Maven
        run: |
          mvn clean verify \
          -Dquarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/testdb \
          -Dquarkus.datasource.username=testuser \
          -Dquarkus.datasource.password=testpassword
      
      - name: Generate Code Coverage Report
        run: mvn jacoco:report
      
      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      
      - name: Run Vulnerability Analysis
        run: mvn dependency-check:check
      
      - name: Package Application
        run: |
          mvn package -Dquarkus.profile=dev \
          -Dquarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/testdb \
          -Dquarkus.datasource.username=testuser \
          -Dquarkus.datasource.password=testpassword
      
      - name: Build Docker Image
        run: docker build -t resonate:${{ github.run_number }} .
      
      - name: Login to Docker Registry
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin ${{ secrets.DOCKER_REGISTRY }}
      
      - name: Tag and Push Docker Image
        run: |
          IMAGE_TAG=${{ github.run_number }}
          docker tag resonate:${IMAGE_TAG} ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/resonate:${IMAGE_TAG}
          docker push ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/resonate:${IMAGE_TAG}
    
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: core-runner-jar
          path: target/core-runner.jar
