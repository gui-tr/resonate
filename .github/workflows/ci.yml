name: CI Pipeline
on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
env:
  CONFIG_ENV: DEV
jobs:
  build:
    runs-on: ubuntu-latest
    environment: Development
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Prepare Configuration
        run: |
          if [ "${CONFIG_ENV}" = "DEV" ]; then
            cp src/main/resources/configmaps/configmap-dev.properties src/main/resources/application.properties
          else
            cp src/main/resources/configmaps/configmap-prod.properties src/main/resources/application.properties
          fi

      - name: Inject Environment Secrets into Configuration
        run: |
          sed -i "s|\${SUPABASE_USERNAME}|${{ secrets.SUPABASE_USERNAME }}|g" src/main/resources/application.properties
          sed -i "s|\${SUPABASE_PASSWORD}|${{ secrets.SUPABASE_PASSWORD }}|g" src/main/resources/application.properties
          sed -i "s|\${JWT_SECRET}|${{ secrets.JWT_SECRET }}|g" src/main/resources/application.properties
          sed -i "s|\${SUPABASE_DB_URL}|${{ secrets.SUPABASE_DB_URL }}|g" src/main/resources/application.properties
          sed -i "s|\${SUPABASE_URL}|${{ secrets.SUPABASE_URL }}|g" src/main/resources/application.properties
          sed -i "s|\${SUPABASE_API_KEY}|${{ secrets.SUPABASE_API_KEY }}|g" src/main/resources/application.properties
          sed -i "s|\${BACKBLAZE_KEY_ID}|${{ secrets.BACKBLAZE_KEY_ID }}|g" src/main/resources/application.properties
          sed -i "s|\${BACKBLAZE_APPLICATION_KEY}|${{ secrets.BACKBLAZE_APPLICATION_KEY }}|g" src/main/resources/application.properties
          sed -i "s|\${BACKBLAZE_BUCKET_NAME}|${{ secrets.BACKBLAZE_BUCKET_NAME }}|g" src/main/resources/application.properties

      # Set up test environment with Supabase extensions and auth.uid() mock function
      - name: Set Up Test Environment
        run: |
          # Create a script to initialize test environment
          cat > setup-test-db.sql << EOF
          -- Create auth schema if it doesn't exist
          CREATE SCHEMA IF NOT EXISTS auth;
          
          -- Create a mock auth.uid() function that returns a default test user ID
          CREATE OR REPLACE FUNCTION auth.uid() RETURNS uuid AS $
              BEGIN
                  RETURN '00000000-0000-0000-0000-000000000000'::uuid;
              END;
          $ LANGUAGE plpgsql;
          EOF
          
          # Execute the script against your test database
          PGPASSWORD=${{ secrets.SUPABASE_PASSWORD }} psql -h $(echo ${{ secrets.SUPABASE_DB_URL }} | sed 's|jdbc:postgresql://\([^:]*\):.*|\1|') \
                                                        -p $(echo ${{ secrets.SUPABASE_DB_URL }} | sed 's|.*:\([0-9]*\)/.*|\1|') \
                                                        -U ${{ secrets.SUPABASE_USERNAME }} \
                                                        -d $(echo ${{ secrets.SUPABASE_DB_URL }} | sed 's|.*/\(.*\)|\1|') \
                                                        -f setup-test-db.sql

      # Run tests with the mocked auth.uid() function
      - name: Build and Test with Maven
        run: |
          mvn clean verify

      - name: Generate Code Coverage Report
        run: mvn jacoco:report

      # Run SonarCloud Analysis
      - name: Run SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}

      # Run Vulnerability Analysis (if plugin is configured)
      - name: Run Vulnerability Analysis
        run: |
          if grep -q "org.owasp:dependency-check-maven" pom.xml; then
            mvn org.owasp:dependency-check-maven:check
          else
            echo "OWASP Dependency Check plugin not configured in pom.xml, skipping vulnerability analysis"
          fi

      - name: Package Application
        run: |
          mvn package -Dquarkus.profile=dev

      - name: Build Docker Image
        run: docker build -t resonate:${{ github.run_number }} .

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag and Push Docker Image
        run: |
          IMAGE_TAG=${{ github.run_number }}
          docker tag resonate:${IMAGE_TAG} ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/resonate:${IMAGE_TAG}
          docker push ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/resonate:${IMAGE_TAG}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: core-runner-jar
          path: target/core-runner.jar